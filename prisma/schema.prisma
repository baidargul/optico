generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model nature {
  id       String     @id @default(uuid())
  name     String     @unique
  archived Boolean    @default(false)
  dynamic  Boolean    @default(false)
  category category[]
}

model category {
  id         String       @id @default(uuid())
  natureId   String
  name       String
  archived   Boolean      @default(false)
  nature     nature       @relation(fields: [natureId], references: [id], onDelete: Cascade)
  properties properties[]
}

model properties {
  id              String            @id @default(uuid())
  categoryId      String
  index           Int?
  type            String            @default("text")
  defaultId       String?
  createdAt       DateTime?         @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime?         @default(now()) @db.Timestamptz(6)
  name            String
  prefix          String?
  suffix          String?
  category        category          @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  default         propertyOptions?  @relation("properties_defaultIdTopropertyOptions", fields: [defaultId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  propertyOptions propertyOptions[]
}

model propertyOptions {
  id                                               String       @id @default(uuid())
  propertyId                                       String
  index                                            Int?
  value                                            String?
  createdAt                                        DateTime?    @default(now()) @db.Timestamptz(6)
  updatedAt                                        DateTime?    @default(now()) @db.Timestamptz(6)
  properties_properties_defaultIdTopropertyOptions properties[] @relation("properties_defaultIdTopropertyOptions")
  properties                                       properties   @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model purchase {
  id             String    @id @default(uuid())
  dateOfPurchase DateTime? @default(now()) @db.Timestamptz(6)
  accountId      String
  createdAt      DateTime? @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime? @default(now()) @db.Timestamptz(6)
}
